import numpy as np
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)

class DataValidator:
    """改进的数据验证器，增强容错性和详细日志"""
    
    @staticmethod
    def validate_task_data(data: Dict) -> bool:
        """验证任务数据完整性 - 改进版"""
        try:
            if not isinstance(data, dict):
                logger.error("任务数据不是字典类型")
                return False
            
            # 检查基本结构
            if 'task_info' not in data:
                logger.warning("缺少task_info，但继续验证")
                # 不直接返回False，继续检查其他部分
            
            task_info = data.get('task_info', {})
            
            # 检查必要字段，但允许部分缺失
            required_fields = ['task_id']  # 只要求最关键的字段
            optional_fields = ['task_name', 'task_area', 'task_time', 'force_composition']
            
            missing_required = []
            for field in required_fields:
                if field not in task_info or not task_info[field]:
                    missing_required.append(field)
            
            if missing_required:
                logger.error(f"缺少必需的任务信息字段: {missing_required}")
                return False
            
            # 检查可选字段
            missing_optional = []
            for field in optional_fields:
                if field not in task_info or not task_info[field]:
                    missing_optional.append(field)
            
            if missing_optional:
                logger.warning(f"缺少可选的任务信息字段: {missing_optional}")
            
            # 检查通信链路
            comm_links = data.get('communication_links', [])
            if not comm_links:
                logger.warning("没有通信链路，将在后续创建默认链路")
            else:
                logger.info(f"找到 {len(comm_links)} 个通信链路")
            
            # 检查节点信息
            nodes = data.get('nodes', {})
            if not nodes:
                logger.warning("没有节点信息")
            else:
                logger.info(f"节点信息: {list(nodes.keys())}")
            
            return True
            
        except Exception as e:
            logger.error(f"任务数据验证异常: {str(e)}")
            return False
    
    @staticmethod
    def validate_environment_data(data: Dict) -> bool:
        """验证环境数据完整性 - 改进版"""
        try:
            if not isinstance(data, dict):
                logger.error("环境数据不是字典类型")
                return False
            
            if not data:
                logger.error("环境数据为空")
                return False
            
            # 检查关键环境参数
            required_fields = ['海况等级', '电磁干扰强度']
            optional_fields = ['地理特征', '背景噪声', '多径效应', '温度', '盐度', '深度']
            
            missing_required = []
            for field in required_fields: